<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adsnative Developer Center</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 01 Oct 2014 18:00:02 -0700</pubDate>
    <lastBuildDate>Wed, 01 Oct 2014 18:00:02 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Guides: CSS Path Guide</title>
        <description>&lt;h1 id=&quot;css-path-guide&quot;&gt;&lt;strong&gt;CSS Path Guide&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;AdsNative follows its own format by specifying the CSS Path to simplify and optimize native ad injections.&lt;/p&gt;

&lt;p&gt;Check out this example:
&lt;code&gt;#div-id &amp;gt; div.class:eq(0) &amp;gt; div.class2:eq(2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are some basic rules to follow:&lt;br /&gt;
  1. Start by listing the outermost elements from left to right.&lt;br /&gt;
  2. AdsNative will insert the placement just before the element for which you configure the CSS Path - unless you have &lt;code&gt;:after&lt;/code&gt; after the last element, in which case it will insert it after the element. For example, &lt;code&gt;#div-id &amp;gt; div.class:eq(0) &amp;gt; div.class2:eq(2):after&lt;/code&gt; will output the placement after the given element.&lt;br /&gt;
  3. Each div element relation is separated with  ` &amp;gt; &lt;code&gt;. (Leaving a blank space before and after is part of the syntax, and the cssPath follows a strict syntax.)  &lt;/code&gt; &amp;gt; ` means ‘child of’.&lt;br /&gt;
  4. If you are specifying an element with its ID, specify it as &lt;code&gt;#element-id-string&lt;/code&gt;. In this case, do not specify the element name.&lt;br /&gt;
  5. If you are specifying an element by class name, specify the element name followed by &lt;code&gt;.&lt;/code&gt;, class name, and the index of the element, as there can be multiple elements within a given class name. Example &lt;code&gt;div.class:eq(0)&lt;/code&gt;&lt;br /&gt;
  6. If you want to specify just an element name, you can specify it as &lt;code&gt;element-name:eq(0)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A few examples of valid CSS Paths:&lt;br /&gt;
  1. &lt;code&gt;#content &amp;gt; ul.main:eq(0) &amp;gt; li:eq(0)&lt;/code&gt;&lt;br /&gt;
  2. &lt;code&gt;#content &amp;gt; ul.main:eq(0) &amp;gt; li:eq(10)&lt;/code&gt;&lt;br /&gt;
  3. &lt;code&gt;#content&lt;/code&gt;&lt;br /&gt;
  4. &lt;code&gt;#content:after&lt;/code&gt;&lt;br /&gt;
  5. &lt;code&gt;ul.main-content:eq(0) &amp;gt; li:eq(10)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A few examples of invalid CSS Paths:&lt;br /&gt;
  1. &lt;code&gt;#content&amp;gt;ul.main:eq(0) &amp;gt; li:eq(0)&lt;/code&gt; (no spaces)&lt;br /&gt;
  2. &lt;code&gt;#content:eq(0) &amp;gt; li.post:eq(0)&lt;/code&gt; (:eq(0) for element name with ID)&lt;br /&gt;
  3. &lt;code&gt;div#content &amp;gt; li:eq(10)&lt;/code&gt; (div element name in css path)&lt;br /&gt;
  4. &lt;code&gt;#content &amp;gt; ul.main &amp;gt; li:eq(10)&lt;/code&gt; (no index specified for ul)&lt;/p&gt;

&lt;p&gt;Try to specify the shortest css path whenever possible. Which basically means - try to use the nearest element with an ID, and then work downwards. Element name search takes the longest, then element with class name, and element with div id is the fastest.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 09:54:46 -0700</pubDate>
        <link>http://yourdomain.com/guides/css-path</link>
        <guid isPermaLink="true">http://yourdomain.com/guides/css-path</guid>
        
        
        <category>guides</category>
        
      </item>
    
      <item>
        <title>Guides: Placement Setup Guide</title>
        <description>&lt;h1 id=&quot;placement-creation-basics&quot;&gt;&lt;strong&gt;Placement Creation Basics&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In this guide you will find the required documentation for creating placements.&lt;/p&gt;

&lt;p&gt;When you create a new placement, you will be taken to the placement settings page. Feel free to edit any settings that you deem important for your placement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/placement.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://yourdomain.com/guides/placement-setup</link>
        <guid isPermaLink="true">http://yourdomain.com/guides/placement-setup</guid>
        
        
        <category>guides</category>
        
      </item>
    
      <item>
        <title>Guides: Native Markup Language</title>
        <description>&lt;h1 id=&quot;adsnative-markup-language&quot;&gt;&lt;strong&gt;AdsNative Markup Language&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Note: Tags follow strict syntax. If a space or comma is off, it will throw an error.&lt;br /&gt;
Additionally, all variable values, except booleans, need to be in quotations.&lt;/p&gt;

&lt;h2 id=&quot;ad-content-information&quot;&gt;&lt;strong&gt;Ad Content Information&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;posttitle-&quot;&gt;{{ post_title() }}&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ post_title(a=false, h=&quot;h2&quot;, h_class=&quot;large_title&quot;, h_style=&quot;color:#fff;&quot;) }}&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;will be rendered as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h2 class=&quot;large_title&quot; style=&quot;color:#fff;&quot;&amp;gt;Native Ad Title&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class applied to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Hyperlinks the element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Specify the h element of the title&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;h_class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class applied to the h element of the title&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;h_style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Specify the h element of the title&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;postsummary-&quot;&gt;{{ post_summary() }}&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class applied to the element tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the element tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tagName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Specifies the element tag, otherwise it is injected as a raw test&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;featureimage-&quot;&gt;{{ feature_image() }}&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class applied to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Hyperlinks the element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a_class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class assigned to the hyperlink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a_style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the hyperlink&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;brand-information&quot;&gt;&lt;strong&gt;Brand Information&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;brand-image&quot;&gt;Brand Image&lt;/h3&gt;

&lt;h4 id=&quot;brandimage-&quot;&gt;{{ brand_image() }}&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class applied to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Hyperlinks the element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a_class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class assigned to the hyperlink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a_style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the hyperlink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;width&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Specifies the width of the brand image&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;height&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Specifies the height of the brand image&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;brand-name&quot;&gt;Brand Name&lt;/h3&gt;

&lt;h4 id=&quot;postauthor-&quot;&gt;{{ post_author() }}&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class applied to the element tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the element tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tagName&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Specifies the element tag, otherwise injected as raw test&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Hyperlinks the element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a_class&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Class assigned to the hyperlink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a_style&lt;/td&gt;
      &lt;td&gt;CSS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;CSS styling applied to the hyperlink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prefix&lt;/td&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Add prefix such as ‘Promoted by’ and then brand name&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;post-click-behavior&quot;&gt;&lt;strong&gt;Post Click Behavior&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;post-click-url&quot;&gt;Post Click URL&lt;/h3&gt;

&lt;h3 id=&quot;posturl-&quot;&gt;{{ post_url() }}&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Default&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;Boolean&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Hyperlinks the element&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://yourdomain.com/guides/markup-language</link>
        <guid isPermaLink="true">http://yourdomain.com/guides/markup-language</guid>
        
        
        <category>guides</category>
        
      </item>
    
      <item>
        <title>Sdk: RenderJS Advanced API</title>
        <description>&lt;h1 id=&quot;javascript-api-docs&quot;&gt;&lt;strong&gt;Javascript API Docs&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In some advanced cases, you may not want AdsNative RenderJS to handle automatic ad rendering (such as infinite scrolling, or if you want to show the native ad on certain user actions, etc.). In this case, you may want to circumvent the RenderJS default behavior. &lt;/p&gt;

&lt;p&gt;Insert the following tag in the HEAD section of your webpage. By doing this, RenderJS will not fetch or render any native ads until explicitly called by given functions. Please also note that you need to include the below code before using any of the given function calls.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Begin ADSNATIVE Code --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
var _AdsNativeOpts = {
    blockAdLoad: true
};
&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://static.adsnative.com/static/js/render.v1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- End ADSNATIVE Code --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;prefetch-native-ad&quot;&gt;Prefetch Native Ad&lt;/h3&gt;

&lt;p&gt;You can choose to prefetch the native ad from the AdsNative server for a given ad unit before the document is ready, as well as before you are ready to render the ad. This way there will not be any latency for network requests, and the ad will be for ready for rendering when it needs to be.&lt;/p&gt;

&lt;p&gt;All the calls to the API are handled through ‘_AdsNative’ object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var keywords = []
_AdsNative.fetchAds([&#39;YOUR_PLACEMENT_KEY-1&#39;, &#39;YOUR_PLACEMENT_KEY-2&#39;], keywords, function(status, apiKey){
    if(status){ //if a native ad is returned

    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above is an example of the ‘fetchAds’ function, which will call all available arguments. You can fetch multiple placements, and specify current page keywords for keyword targeting. Notice that you can also provide a callback for the event that the ad request is finished. The callback function provides ‘status’ and ‘apiKey’ as arguments. ‘status’ is a boolean value which indicates whether there is an ad returned for a current request. Depending on the result, you can take an action. apiKey gives an indication to which placement the call is for. The callback is then returned for each placement.&lt;/p&gt;

&lt;h3 id=&quot;display-native-ad&quot;&gt;Display Native Ad&lt;/h3&gt;

&lt;p&gt;Once the ad is prefetched you can choose to display that native ad at the desired event. For example in the case of infinite scroll, you may want to display it when the user scrolls down. Or you may want to show it when the second page shows up, etc. You can use the ‘displayAd’ function to show an ad for a placement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_AdsNative.displayAd(&#39;YOUR_PLACEMENT_KEY-1&#39;, &#39;native-ad-element-id&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to specify the API key of the placement that needs to be displayed, and then the ID of the element in which the native ad should be displayed. This ‘native-ad-element-id’ element should be an empty div because when the displayAd in included, this element will be replaced by the native ad.&lt;/p&gt;

&lt;h3 id=&quot;complete-example&quot;&gt;Complete Example&lt;/h3&gt;

&lt;p&gt;The following is a complete example, which uses all of the above functions. It is a simple example, where ads get displayed immediately once the page is ready.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
	&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
	&amp;lt;div id=&quot;an-ad-abc&quot;&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div id=&quot;an-ad-xyz&quot;&amp;gt;&amp;lt;/div&amp;gt;

	&amp;lt;!-- Begin ADSNATIVE Code --&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
	var _AdsNativeOpts = {
	    blockAdLoad: true
	};
	&amp;lt;/script&amp;gt;
	&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://static.adsnative.com/static/js/render.v1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;!-- End ADSNATIVE Code --&amp;gt;

	&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
	_AdsNative.fetchAds([&#39;abc&#39;, &#39;xyz&#39;], [&#39;sports&#39;, &#39;autos&#39;], function(status, apiKey){
	    if(status){ //if a native ad is returned
	        $(document).ready(function(){
	             _AdsNative.displayAd(apiKey, &#39;an-ad-&#39;+apiKey)
	        });
	    }
	});
	&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://yourdomain.com/sdk/js-api</link>
        <guid isPermaLink="true">http://yourdomain.com/sdk/js-api</guid>
        
        
        <category>sdk</category>
        
      </item>
    
      <item>
        <title>Sdk: iOS SDK</title>
        <description>&lt;h1 id=&quot;ios-sdk&quot;&gt;&lt;strong&gt;iOS SDK&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/picatcha/AdsNative-iOS-SDK/archive/master.zip&quot;&gt;ZIP File&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-adsnative-in-your-xcode-project&quot;&gt;Installing AdsNative in your XCode project&lt;/h3&gt;

&lt;p&gt;Step 1. Clone the git repository into your desired folder. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone git@github.com:picatcha/AdsNative-iOS-SDK.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OR &lt;/p&gt;

&lt;p&gt;Download the zip by clicking on the button shown on right of the Github page.&lt;/p&gt;

&lt;p&gt;Step 2. Drag and drop “AdsNative” folder from the repository into your project’s root folder.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;![alt text](https://s3.amazonaws.com/adsnative-public/images/add-folder.png &quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Check “Copy items…”, select “Create groups for..” and “Finish”.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;![alt text](https://s3.amazonaws.com/adsnative-public/images/copy-project.png &quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 4. It should look something like this…&lt;/p&gt;

&lt;p&gt;&lt;code&gt;![alt text](https://s3.amazonaws.com/adsnative-public/images/final.png &quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 5. Under “Targets -&amp;gt; Build Phases”, add the &lt;code&gt;AdSupport.Framework&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![alt text](https://s3.amazonaws.com/adsnative-public/images/add-frameworks.png &quot;&quot;)

![alt text](https://s3.amazonaws.com/adsnative-public/images/lookup.png &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 6. Repeat the process for &lt;code&gt;SystemConfiguration.Framework&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;using-adsnative-apis&quot;&gt;Using AdsNative APIs&lt;/h4&gt;

&lt;p&gt;Step 7. Add &lt;code&gt;#import &quot;Adsnative.h&quot;&lt;/code&gt; in your header file whenever you plan to use AdsNative. &lt;/p&gt;

&lt;p&gt;Step 8. Create an ANAdRequest object, initializing it with the zone ID provided to you. You will have to pass this object to most of the requests you make to AdsNative.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ANAdRequest *request = [ANAdRequest requestWithAdUnitID:@&quot;INSERT-YOUR-ZONE-ID-HERE&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 9. Request that sponsored content make a call to the following non-blocking function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ANSponsoredStory loadRequest:request
  onSuccess:^(ANSponsoredStory *story) {
        NSLog(@&quot;Title: %@&quot;, story.title);
    }
  onError:^(NSError *error) {
        // Oops ad request was not successful
    }];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 10. Please note that when you create UIView or any UIView based class using the information provided by the above ANSponsoredStory object, you will have to attach that view to the ANSponsoredStory object. The same is true for ViewController or the native browser used by the app to open the sponsored content. This allows AdsNative track various events occuring on the sponsored content. &lt;/p&gt;

&lt;p&gt;The following code snippet shows an example of code that can be used in a table view:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if([[news objectAtIndex:indexPath.row] isKindOfClass:[ANSponsoredStory class]]) {
        ANSponsoredStory *sponsoredStory = [news objectAtIndex:indexPath.row];
        //Configure the ANSponsoredStory on select/tap action here.
        HandleSelectBlock handleSelectBlock = ^(){
            //Begin: Your code - Open the full content view of your choice
            NSLog(@&quot;click handler in block&quot;);
            SVModalWebViewController *webViewController = [[SVModalWebViewController alloc] initWithAddress:sponsoredStory.url];
            [self presentModalViewController:webViewController animated:YES];
            //End: Your code
            
            //This line is important and should be called in all cases except for video ads. Pass the full content view as an argument
            if([sponsoredStory.type  isEqual: @&quot;story&quot;]){
                [sponsoredStory attachFullContentToView:webViewController.view];
            }
        };
        [sponsoredStory attachToView:cell onSelect:handleSelectBlock];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the user click/tap handler also needs to be passed to the attachToView function, which will handle the user’s tap event and take your desired action - typically opening a native browser.&lt;/p&gt;

&lt;p&gt;You can look at the TestApplication provided in the project for a detailed example and instructions on how to best use the AdsNative SDK.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://yourdomain.com/sdk/ios-sdk</link>
        <guid isPermaLink="true">http://yourdomain.com/sdk/ios-sdk</guid>
        
        
        <category>sdk</category>
        
      </item>
    
      <item>
        <title>Sdk: RenderJS</title>
        <description>&lt;h1 id=&quot;generalized-renderjs-default-behaviour&quot;&gt;&lt;strong&gt;‘Generalized’ RenderJS&lt;/strong&gt; (default behaviour)&lt;/h1&gt;

&lt;p&gt;The following are default ad tags provided by AdsNative, which will automatically render configured placements or native ads in the correct location on the intended pages. It is called “Generalized” RenderJS because you can use the same piece of code for any placement and site domain you have, making it easier for publishers to install the tags on their sites. Insert the following tags in your webpage in &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your site (i.e. just before &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Begin ADSNATIVE Code --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://static.adsnative.com/static/js/render.v1.js&quot;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;!-- End ADSNATIVE Code --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;making-renderjs-effective&quot;&gt;Making RenderJS Effective&lt;/h3&gt;

&lt;p&gt;“Generalized” RenderJS uses a configured CSS Path to search and insert the native ad into the correct location. Sometimes this adds to latency when rendering the ad. If this seems to be the case, you can choose one of the following approaches to reduce  latency.&lt;/p&gt;

&lt;h4 id=&quot;option-1&quot;&gt;Option 1&lt;/h4&gt;

&lt;p&gt;In this option you can insert the following tags directly into the location where the native ad should be rendered.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Begin ADSNATIVE Code --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
var _AdsNativeOpts = {
	&#39;zid&#39;: &#39;&amp;lt;ADZONE_KEY&amp;gt;&#39;,
};
&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://static.adsnative.com/static/js/render.v1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- End ADSNATIVE Code --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;option-2&quot;&gt;Option 2&lt;/h4&gt;

&lt;p&gt;In this option you can insert the following tags just before &amp;lt;/body&amp;gt; tags. This requires you to specify the element ID where the native ad should be rendered. It is also required that the given element is empty. When the native ad is rendered, it will replace that element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Begin ADSNATIVE Code --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
var _AdsNativeOpts = {
    adUnits: [
	{
	&#39;zid&#39;: &#39;&amp;lt;ADZONE_KEY_1&amp;gt;&#39;,
	&#39;nativeAdElementId&#39;: &#39;div-id-1&#39;
	},
	{
	&#39;zid&#39;: &#39;&amp;lt;ADZONE_KEY_2&amp;gt;&#39;,
	&#39;nativeAdElementId&#39;: &#39;div-id-2&#39;
	},
]
};
&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://static.adsnative.com/static/js/render.v1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- End ADSNATIVE Code --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://yourdomain.com/sdk/generalized-render-js</link>
        <guid isPermaLink="true">http://yourdomain.com/sdk/generalized-render-js</guid>
        
        
        <category>sdk</category>
        
      </item>
    
      <item>
        <title>Sdk: Android SDK</title>
        <description>&lt;h1 id=&quot;android-sdk&quot;&gt;&lt;strong&gt;Android SDK&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/picatcha/adsnative_android_sdk/archive/master.zip&quot;&gt;ZIP File&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installing-adsnative-into-your-project&quot;&gt;Installing AdsNative into your project&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Download AdsNativeAndroidSDK.jar and copy it to your &lt;em&gt;/libs/&lt;/em&gt; folder inside of your application project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Android Studio users:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open the build.gradle file and edit your dependencies to include the new .jar file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!groovy
dependencies {
    compile files(&#39;libs/AdsNativeAndroidSDK.jar&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;File &amp;gt; Project structure&lt;/em&gt;. Choose your module and add dependency to your project by &lt;em&gt;+ &amp;gt; File dependency&lt;/em&gt; and choose &lt;em&gt;AdsNativeAndroidSDK.jar&lt;/em&gt; from your &lt;em&gt;/libs/&lt;/em&gt; folder. &lt;/p&gt;

&lt;p&gt;** For Eclipse users:**&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;Project &amp;gt; Properties &amp;gt; Java Build Path &amp;gt; Libraries &amp;gt; Add external Jar&lt;/em&gt; and choose &lt;em&gt;AdsNativeAndroidSDK.jar&lt;/em&gt; from your &lt;em&gt;/libs/&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Add &lt;a href=&quot;http://developer.android.com/google/play-services/setup.html&quot;&gt;Google Play Services&lt;/a&gt; to your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Add permissions to your &lt;em&gt;AndroidManifest.xml&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!xml

&amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&amp;gt;   
&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Add WebViewActivity to your &lt;em&gt;AndroidManifest.xml&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!xml

&amp;lt;activity android:name=&quot;com.adsnative.android.sdk.WebViewActivity&quot;
               android:configChanges=&quot;orientation|screenSize&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Minimum Android SDK: Android 2.3 API (9)&lt;/p&gt;

&lt;h2 id=&quot;using-adsnative-apis&quot;&gt;Using AdsNative APIs&lt;/h2&gt;

&lt;h3 id=&quot;integrating-sponsored-stories-into-listview-in-listactivity&quot;&gt;Integrating sponsored stories into ListView in ListActivity&lt;/h3&gt;

&lt;p&gt;We tried to make this as simple as possible. All you have to do is create an array of integers containing positions of sponsored stories in a ListView. Then create new &lt;em&gt;AdsNativeListAdapter&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!java

int[] sponsoredStoryPositions = {0, 4, 13, 69};
AdsNativeListAdapter adsNativeListAdapter = 
    new AdsNativeListAdapter(getBaseContext(), myAdapter, sponsoredStoryPositions, AD_UNIT_ID);
setListAdapter(adsNativeListAdapter);

//fetch and add SponsoredStories to the ListView
adsNativeListAdapter.loadSponsoredStories();  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sponsored stories are going to be fetched and added to the ListView.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;myAdapter - developers’ list adapter&lt;/li&gt;
  &lt;li&gt;sponsoredStoryPositions - positions on the ListView where sponsored stories are going to be added.&lt;/li&gt;
  &lt;li&gt;AD_UNIT_ID - AdsNative user ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fetching-single-sponsoredstory&quot;&gt;Fetching single SponsoredStory&lt;/h3&gt;

&lt;p&gt;We use SponsoredStoryController to fetch and manage our SponsoredStory. &lt;br /&gt;
Method getSponsoredStoryView( … ) also sets time and impression logging listeners.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!java

SponsoredStoryController sponsoredStoryController = new SponsoredStoryController(getBaseContext());

//fetches sponsored story
sponsoredStoryController.fetchSponsoredStory(AD_UNIT_ID); 

//listener when sponsored story is completely fetched 
sponsoredStoryController.setOnSponsoredStoryListener(new OnSponsoredStoryListener() {
            @Override
            public void onSponsoredStory(SponsoredStory sponsoredStory) {
                View view = sponsoredStoryController.getSponsoredStoryView(sponsoredStory);
            }

            @Override
            public void onFailure(FailureMessage failureMessage) {
                Log.e(ERROR_TAG, failureMessage.getMessage());
            }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;view - View object with default layout for SponsoredStory with layout_width = “match_parent” and layout_height=”wrap_content”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&quot;put-sponsoredstory-at-the-bottom-of-the-screen&quot;&gt;Put SponsoredStory at the bottom of the screen.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#!java

RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.my_activty_relative_layout);

sponsoredStoryController.setOnSponsoredStoryListener(new OnSponsoredStoryListener() {
            @Override
            public void onSponsoredStory(SponsoredStory sponsoredStory) {
                View view = sponsoredStoryController.getSponsoredStoryView(sponsoredStory);
                RelativeLayout.LayoutParams layoutParams = 
                              new RelativeLayout.LayoutParams(
                                             ViewGroup.LayoutParams.WRAP_CONTENT, 
                                             ViewGroup.LayoutParams.WRAP_CONTENT);
                layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM); 
                relativeLayout.addView(view, layoutParams);
            }

            @Override
            public void onFailure(FailureMessage failureMessage) {
                Log.e(ERROR_TAG, failureMessage.getMessage());
            }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;attach-data-to-the-developers-custom-views-located-inside-a-specified-layout-make-sure-that-the-layout-has-already-been-attached-to-some-sort-of-a-parent-ie-in-xml-layout-files&quot;&gt;Attach data to the developer’s custom Views located inside a specified layout. Make sure that the layout has already been attached to some sort of a parent, i.e. in xml layout files.&lt;/h4&gt;

&lt;p&gt;Adding a session ID tag to the developer’s custom View is obligatory in order to protect from render conflicts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!java

//textView is a child of relativeLayout
RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.my_sponsored_story_layout);
TextView textView = (TextView) findViewById(R.id.my_sponsored_story_text);

//Attach SponsoredStory to specified container (container has to be an instance of RelativeLayout) 
sponsoredStoryController.setOnSponsoredStoryListener(new OnSponsoredStoryListener() {
            @Override
            public void onSponsoredStory(SponsoredStory sponsoredStory) {
                textView.set(&quot;I&#39;m SponsoredStory with title: &quot; + sponsoredStory.getSponsoredStoryData().getTitle());
                relativeLayout.setTag(sponsoredStory.getSponsoredStoryData().getSessionId());
                sponsoredStoryController.getSponsoredStoryView(sponsoredStory, relativeLayout);
            }

            @Override
            public void onFailure(FailureMessage failureMessage) {
                Log.e(ERROR_TAG, failureMessage.getMessage());
            }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;attach-data-to-the-developers-custom-views-that-are-inside-a-specified-layout-that-has-not-been-attached-to-any-parent&quot;&gt;Attach data to the developer’s custom Views that are inside a specified layout that has NOT been attached to any parent.&lt;/h4&gt;

&lt;p&gt;Adding session ID tag to the developer’s custom View is obligatory, in order to protect from render conflicts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!java

RelativeLayout mParent = (RelativeLayout) findViewById(R.id.my_activity_main_relative_layout);

//textView is a child of relativeLayout.
RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.my_sponsored_story_layout);
TextView textView = (TextView) findViewById(R.id.my_sponsored_story_text);

//Attach SponsoredStory to specified container (container has to be an instance of RelativeLayout) 
sponsoredStoryController.setOnSponsoredStoryListener(new OnSponsoredStoryListener() {
            @Override
            public void onSponsoredStory(SponsoredStory sponsoredStory) {
                textView.set(&quot;I&#39;m SponsoredStory with title: &quot; + sponsoredStory.getSponsoredStoryData().getTitle());
                relativeLayout.setTag(sponsoredStory.getSponsoredStoryData().getSessionId());
                sponsoredStoryController.getSponsoredStoryView(sponsoredStory, relativeLayout, mParent);
            }

            @Override
            public void onFailure(FailureMessage failureMessage) {
                Log.e(ERROR_TAG, failureMessage.getMessage());
            }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XML file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!xml
&amp;lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:id=&quot;@+id/my_activity_main_relative_layout&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;&amp;gt;

    &amp;lt;RelativeLayout
        android:id=&quot;@+id/my_sponsored_story_layout&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot; &amp;gt;

        &amp;lt;TextView
            android:id=&quot;@+id/my_sponsored_story_text&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot; /&amp;gt;

    &amp;lt;/RelativeLayout&amp;gt;
&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0700</pubDate>
        <link>http://yourdomain.com/sdk/android-sdk</link>
        <guid isPermaLink="true">http://yourdomain.com/sdk/android-sdk</guid>
        
        
        <category>sdk</category>
        
      </item>
    
      <item>
        <title>Question: Your questions</title>
        <description>&lt;h4 id=&quot;your-project-name&quot;&gt;YOUR PROJECT NAME&lt;/h4&gt;
&lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.&lt;/p&gt;

&lt;h4 id=&quot;our-proposal&quot;&gt;Our Proposal&lt;/h4&gt;
&lt;p&gt;It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Apr 2014 09:54:46 -0700</pubDate>
        <link>http://yourdomain.com/question/your-project-name</link>
        <guid isPermaLink="true">http://yourdomain.com/question/your-project-name</guid>
        
        
        <category>question</category>
        
      </item>
    
      <item>
        <title>Project: YOUR PROJECT NAME</title>
        <description>&lt;h4 id=&quot;your-project-name&quot;&gt;YOUR PROJECT NAME&lt;/h4&gt;
&lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.&lt;/p&gt;

&lt;h4 id=&quot;our-proposal&quot;&gt;Our Proposal&lt;/h4&gt;
&lt;p&gt;It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Apr 2014 09:54:46 -0700</pubDate>
        <link>http://yourdomain.com/project/your-project-name</link>
        <guid isPermaLink="true">http://yourdomain.com/project/your-project-name</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Project: YOUR PROJECT NAME</title>
        <description>&lt;h4 id=&quot;your-project-name&quot;&gt;YOUR PROJECT NAME&lt;/h4&gt;
&lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.&lt;/p&gt;

&lt;h4 id=&quot;our-proposal&quot;&gt;Our Proposal&lt;/h4&gt;
&lt;p&gt;It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Apr 2014 09:54:46 -0700</pubDate>
        <link>http://yourdomain.com/project/your-project-name</link>
        <guid isPermaLink="true">http://yourdomain.com/project/your-project-name</guid>
        
        
        <category>project</category>
        
      </item>
    
  </channel>
</rss>
